schema {
  query: Query
  mutation: Mutation
}

directive @admin_only on FIELD_DEFINITION

directive @api_key on FIELD_DEFINITION

directive @logged_in on FIELD_DEFINITION

enum APIErrorEnum {
  AUTHENTICATION_ERROR
  BLOCKED
  DELETED
  NOT_ADMIN
  NOT_FOUND
  PARAM_ERROR
  PERMISSION_DENIED
  SERVER_ERROR
}

input BboxInput {
  maxLat: Float!
  maxLng: Float!
  minLat: Float!
  minLng: Float!
}

scalar BigInt

type DEProfile {
  avatar: URL
  id: ID!
  name: String!
  reports(limit: Int!, offset: Int!): RSReportPagination!
}

scalar DateTime

"""This enumeration is designed to correspond to the S3 file paths"""
enum FileTypeEnum {
  INDEX
  INPUTS
  LOG
  OUTPUTS
  ZIP
}

type FileTypeURL {
  fields: JSONObject
  """The type of file for this URL"""
  fileType: FileTypeEnum!
  """A signed URL to download or upload the file"""
  url: URL!
}

scalar GeoJSONObject

type GeoLocation {
  geohash: String!
  latitude: Float!
  longitude: Float!
}

input GeoLocationInput {
  latitude: Float!
  longitude: Float!
}

scalar JSONObject

type Mutation {
  """
  Create a new report. This just creates the record and sets the status to CREATED.
  You must then upload any input files and then call startReport to actually start the report.
  """
  createReport(
    report: RSReportInput!
    """
    (optional) The ID of the user creating the report. If not provided, the logged in user is used.
    """
    userId: ID
  ): RSReport! @logged_in
  """
  Delete a report. This will delete the record and the associated files in S3.
  """
  deleteReport(
    """The ID of the report to delete"""
    reportId: ID!
    """
    (optional) The ID of the user deleting the report. If not provided, the logged in user is used.
    """
    userId: ID
  ): RSReport! @logged_in
  """
  Start a report. This sets the status to QUEUED or RUNNING depending on the current system load.
  """
  startReport(
    """The ID of the report to start"""
    reportId: ID!
    """
    (optional and ADMIN ONLY) The ID of the user starting the report. If not provided, the logged in user is used.
    """
    userId: ID
  ): RSReport! @logged_in @api_key
  """Stop a running report."""
  stopReport(
    """The ID of the report to stop"""
    reportId: ID!
    """
    (optional and ADMIN ONLY) The ID of the user stopping the report. If not provided, the logged in user is used.
    """
    userId: ID
  ): RSReport! @logged_in @api_key
  """
  Update a report. Only certain fields can be updated.
  This is what we use to signal the status of an in-progress report or that it has completed or errored.
  """
  updateReport(
    """
    The fields to update in the report. Only certain fields can be updated.
    """
    report: RSReportUpdateInput!
    """The ID of the report to update"""
    reportId: ID!
    """
    (optional and ADMIN ONLY) The ID of the user updating the report. If not provided, the logged in user is used.
    """
    userId: ID
  ): RSReport! @api_key
}

interface Pagination {
  limit: Int!
  offset: Int!
  total: Int!
}

type Query {
  """A signed URL to download any kind of file in the system"""
  downloadUrls(
    """ (optional) The type of files to request for download. This helps us manage files. If this is not provided all files will be returned
    """
    fileTypes: [FileTypeEnum!]
    """The ID of the report to which the file belongs"""
    reportId: ID!
    """The ID of the user downloading the file"""
    userId: ID
  ): [FileTypeURL!]! @logged_in @api_key
  """Get a paginated list of globally-owned reports"""
  globalReports(limit: Int!, offset: Int!): RSReportPagination! @logged_in
  """
  Get the profile of the logged in user
  (this will actually interface with the Data exchange. There is no separate user database)
  """
  profile: DEProfile! @logged_in
  """Get a report (or the status of the report build) by its UUID"""
  report(
    reportId: ID!
    """
    (optional and ADMIN ONLY) The ID of the user requesting the report. If not provided, the logged in user is used.
    """
    userId: ID
  ): RSReport! @logged_in
  """Get a report type by its ID"""
  reportType(id: ID!): RSReportType!
  """Get a paginated list of report types"""
  reportTypes: RSReportTypePagination!
  """
  Get a signed URL to upload a file to S3 for a specific report.
  The filePath is the path within the report's folder in S3.
  
  Args: reportId - the ID of the report to which the file belongs
        filePath - the path within the report's folder in S3 (e.g. "logs/mylogfile.txt")
        fileType - the type of file being uploaded. This is optional but helps us manage files.
  """
  uploadUrls(
    """ The path within the report's folder in S3 (e.g. "myfile.pdf") """
    filePaths: [String!]!
    """ (optional) The type of file being uploaded. This helps us manage files. The default is REPORT_FILE. You can only upload files of one type at a time.
    """
    fileType: FileTypeEnum
    """The ID of the report to which the file belongs"""
    reportId: ID!
    """The ID of the user uploading the file"""
    userId: ID
  ): [FileTypeURL!]! @api_key
}

type RSReport {
  centroid: GeoJSONObject
  createdAt: DateTime!
  createdBy: DEProfile!
  description: String
  extent: GeoJSONObject
  id: ID!
  name: String!
  outputs: [ReportOutputsEnum!]!
  parameters: JSONObject
  progress: Int!
  reportType: RSReportType!
  status: ReportStatusEnum!
  statusMessage: String
  updatedAt: DateTime!
}

"""
This is the input object used to create a new report and set it running
"""
input RSReportInput {
  description: String
  extent: GeoJSONObject
  name: String!
  parameters: JSONObject
  reportTypeId: ID!
}

type RSReportPagination implements Pagination {
  items: [RSReport!]!
  limit: Int!
  offset: Int!
  total: Int!
}

type RSReportType {
  description: String
  id: ID!
  name: String!
  parameters: JSONObject
  shortName: String
  subHeader: String
  version: String!
}

type RSReportTypePagination implements Pagination {
  items: [RSReportType!]!
  limit: Int!
  offset: Int!
  total: Int!
}

"""There is nothing to update except the status/statusMessage"""
input RSReportUpdateInput {
  progress: Int
  """Only admins can set the status directly."""
  status: ReportStatusEnum!
  """This will show a progress message. It doubles as the error message"""
  statusMessage: String
}

enum ReportOutputsEnum {
  CSV
  HTML
  PDF
  ZIP
}

enum ReportStatusEnum {
  COMPLETE
  CREATED
  DELETED
  ERROR
  QUEUED
  RUNNING
  STOPPED
  UNKNOWN
}

scalar URL